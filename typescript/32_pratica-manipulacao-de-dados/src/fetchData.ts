// Fun√ß√£o para buscar dados de uma URL e retornar no formato de uma interface gen√©rica ou null em caso de erro.
async function fetchData<Interface>(url: string): Promise<Interface | null> {
  try {
    const response = await fetch(url);

    // Erro
    if (!response.ok) {
      throw new Error(
        "N√£o foi poss√≠vel obter os dados das transa√ß√µes: " + response.status
      );
    }

    // Sucesso
    const json = await response.json();
    return json;
  } catch (error) {
    if (error instanceof Error) {
      console.error("fetchData: " + error.message);
    }

    // "Null" garante que o chamador possa lidar com a aus√™ncia de dados sem quebrar o c√≥digo.
    return null;
  }
}

export default fetchData;

/*
  üí° Anota√ß√µes:

  1. Uso de Generics:
     - A fun√ß√£o utiliza a sintaxe de generics (`<Interface>`), permitindo que o chamador especifique o tipo de dados esperado.
     - Isso garante que o retorno seja uma Promise que resolve para o tipo fornecido ou `null` em caso de erro.

  2. Tratamento de erros com `catch`:
     - O bloco `catch` captura qualquer erro lan√ßado dentro do bloco `try`, incluindo o erro explicitamente lan√ßado pela verifica√ß√£o de status HTTP.
     - O objetivo √© retornar um valor controlado (`null`) em caso de erro.
     - Justificativa: Erros de fetch n√£o interrompem o c√≥digo, mas acessar ou iterar sobre dados `undefined` pode causar falhas.

  3. Verifica√ß√£o de inst√¢ncia de `Error`:
     - O `catch` captura qualquer coisa que seja lan√ßada, n√£o apenas inst√¢ncias da classe `Error`.
     - Como erros gen√©ricos podem n√£o possuir a propriedade `.message`, a verifica√ß√£o `instanceof Error` √© necess√°ria para garantir que o acesso seja seguro.
     - Caso o erro n√£o seja uma inst√¢ncia de `Error`, ele ser√° silenciosamente ignorado.

  4. Uso do retorno `null`:
     - Retornar `null` em caso de erro permite que o chamador trate a aus√™ncia de dados de forma previs√≠vel.
     - √â importante documentar essa possibilidade no contrato da fun√ß√£o para evitar comportamentos inesperados.
*/
