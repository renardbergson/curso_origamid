function countBy(arr: (string | number)[]) {
  return arr.reduce((acc: ContadorLista, item) => {
    acc[item] = acc[item] || 0; // captura o valor da propriedade ou inicializa com 0, se ainda n√£o existir
    acc[item] += 1; // soma o valor anterior + 1, a cada nova ocorr√™ncia da mesma chave
    // console.log(acc); üí°
    return acc;
  }, {});
}

export default countBy;

// "arr" deve ser uma array de strings ou n√∫meros porque, se for um array de objetos, dar√° erro, pois o programa tentar√° converter cara objeto em string, para ser a chave do objeto que vamos construir üí°

// 1 - POR QUE ESSA FUN√á√ÉO FUNCIONA TANTO PARA ARRAY DE STRINGS QUANDO PARA ARRAY DE N√öMEROS?
/* 
  Caso 1: Array de strings
    Se o array contiver apenas strings, o c√≥digo funciona perfeitamente, como o c√≥digo implementado:

    const pagamentos = ["Boleto", "Cart√£o de Cr√©dito", "Boleto"];

    const total = pagamentos.reduce((acc: ContadorLista, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {});

    console.log(total); // { Boleto: 2, 'Cart√£o de Cr√©dito': 1 }
    
    O reduce cria chaves no acumulador (acc) usando as strings do array.
    Incrementa os valores associados √†s chaves conforme as strings aparecem no array.

  Caso 2: Array de n√∫meros
    Se o array contiver apenas n√∫meros, o c√≥digo tamb√©m funciona, porque os n√∫meros podem ser usados como chaves de um objeto em JavaScript. Por exemplo:

    const pagamentos = [1, 2, 1, 3];

    const total = pagamentos.reduce((acc: ContadorLista, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {});

    console.log(total); // { '1': 2, '2': 1, '3': 1 }
    Observa√ß√£o:
    As chaves no objeto resultante ser√£o automaticamente convertidas para strings, mesmo que os n√∫meros sejam usados como valores no array. 
  
  Caso 3: Array misto (strings e n√∫meros)
  Se o array contiver uma mistura de strings e n√∫meros, o c√≥digo tamb√©m funcionar√°, porque tanto strings quanto n√∫meros podem ser usados como chaves no objeto acumulador. Por exemplo:

  const pagamentos = ["Boleto", 1, "Boleto", 2, 1];

  const total = pagamentos.reduce((acc: ContadorLista, item) => {
    acc[item] = (acc[item] || 0) + 1;
    return acc;
  }, {});

  console.log(total); // { Boleto: 2, '1': 2, '2': 1 }
  Resultado:
  "Boleto" √© contado normalmente.
  Os n√∫meros 1 e 2 s√£o convertidos em chaves "1" e "2" no objeto.
*/

// 2 - EXPLICA√á√ÉO DA L√ìGICA IMPLEMENTADA NA FUN√á√ÉO
/* 
  1 - Objeto de refer√™ncia para o que est√° acontecendo
    const obj = {
      ["Boleto"]: 30,
      ["Cart√£o de Cr√©dito"]: 70
    }

  2 - Interface definida para o acumulator (segue a mesma estrutura de refer√™ncia)
    interface ContadorLista {
      [key: string]: number;
    }

  3 - Quando o c√≥digo encontra uma chave (item) que ainda n√£o existe no acumulador (acc), ele assume que a contagem inicial √© 0. Isso √© feito com esta verifica√ß√£o: 
    "acc[item] = acc[item] || 0;"  ...Inicializa com 0, se necess√°rio üí°

    a - acc[item]: Verifica se a chave j√° existe no objeto acumulador.
    b - acc[item] || 0: Se a chave n√£o existe (ou seja, √© undefined), assume que o valor inicial √© 0.
    c - Logo, a primeira vez que o reduce encontra um item, ele soma corretamente 0 + 1, representando a primeira ocorr√™ncia daquele item no array.
  
  4 - O valor inicial (0) s√≥ ser√° usado quando uma chave encontrada ainda n√£o existe no objeto. Isso acontece apenas na primeira ocorr√™ncia de cada item. Para ocorr√™ncias posteriores, o valor existente no acumulador √© utilizado.
    Por exemplo:

    const = pagamentos = ["Boleto", "Cart√£o de Cr√©dito", "Boleto"]:
    
    a - Primeira itera√ß√£o: "Boleto" n√£o existe ‚Üí acc["Boleto"] = 0 + 1 ‚Üí acc["Boleto"] = 1.
    b - Segunda itera√ß√£o: "Cart√£o de Cr√©dito" n√£o existe ‚Üí acc["Cart√£o de Cr√©dito"] = 0 + 1 ‚Üí acc["Cart√£o de Cr√©dito"] = 1.
    c - Terceira itera√ß√£o: "Boleto" j√° existe ‚Üí acc["Boleto"] = 1 + 1 ‚Üí acc["Boleto"] = 2.

  5 - Poss√≠veis cen√°rios de erro:
  Um erro poderia ocorrer se o valor inicial fosse algo diferente de 0 ou se n√£o houvesse l√≥gica para verificar a exist√™ncia da chave. 
    Por exemplo:

    acc[item] = acc[item] + 1; // Erro na primeira ocorr√™ncia!

    a - Quando item aparece pela primeira vez, acc[item] √© undefined.
    b - undefined + 1 resulta em NaN (Not a Number).
    c - Por isso a inser√ß√£o + inicializa√ß√£o da propriedade com valor inicial de 0 corrige o bug

  6 - Outras poss√≠veis sintaxes da mesma solu√ß√£o: 
    A - 
    if (acc[item]) {
      acc[item] + 1;
    } else {
      acc[item] = 1; 
    }
    return acc;

    B - 
    acc[item] = (acc[item] || 0) + 1;
    return acc;
*/
