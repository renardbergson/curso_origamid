// ==================== DECLARATION FILES ====================
// Podemos criar arquivos focados apenas na declara√ß√£o de tipos e interfaces, estes devem ser terminados em .d.ts.
// O TypeScript N√ÉO ir√° compilar eles, mas os tipos declarados poder√£o ser consumidos globalmente na nossa aplica√ß√£o.
// Esse tipo de declara√ß√£o √© comum em bibliotecas criadas em JavaScript que desejam dar suporte ao uso da mesma em TypeScript.

// ==================== DECLARATION FILES NATIVOS ====================
// Se clicarmos sobre o m√©todo "querySelector" segurando CONTROL ou COMMAND, teremos acesso ao arquivo de declara√ß√£o desse m√©todo: "lib.dom.d.ts".
//  Veremos ent√£o que nesse arquivo n√£o h√° nenhum c√≥digo al√©m das declara√ß√µes de tipo das bibliotecas do DOM
document.querySelector;

// ==================== DECLARATION FILES MANUAIS x AUTOM√ÅTICOS ====================
// Os arquivos autom√°ticos .d.ts cont√™m somente os tipos que foram exportados ou declarados globalmente nos arquivos .ts, pois eles s√£o compilados. üö®
// O TypeScript n√£o compila os arquivos .d.ts manualmente criados; eles s√£o usados apenas para definir tipos e n√£o participam da compila√ß√£o em si. üí°
// Por exemplo: perceba que a interface "Curso", presente no arquivo .d.ts, criado manualmente, pode ser consumida globalmente, mas n√£o √© automaticamente incluida no arquivo .d.ts autom√°tico "index.d.ts" üí°
// PS: confita as anota√ß√µes do arquivo manual "script.d.ts"
const consumindoCurso: Curso = {
  nome: "HTML",
  totalAulas: 20,
  totalHoras: 40,
};

console.log(consumindoCurso);

// ==================== DECLARA√á√ÉO GLOBAL ====================
// N√£o √© necess√°rio criar um arquivo global ou .d.ts para ter um tipo global.
// √â poss√≠vel tamb√©m declarar dentro de um arquivo do tipo module, usando a sintaxe: "declare global {}"
// No exemplo a seguir, veja que estamos fazendo isso diretamente no nosso arquivo principal "index.ts",
// Isso s√≥ √© poss√≠vel se o arquivo em quest√£o for do tipo "module", o que √© o nosso caso, j√° que nosso arquivo principal possui "import/export" dentro de si, o que automaticamente o torna um arquivo do tipo modular üö®
declare global {
  interface Usuario {
    nome: string;
    id: number;
  }
}

// ==================== EXPORTS ====================
// Tudo que for exportado de arquivos compil√°veis (.ts), assim como tipos/interfaces globais vindas de desse tipo de arquivos, ser√° inclu√≠do no arquivo autom√°tico .d.ts
export interface Produto {
  nome: string;
  preco: number;
}

export const livro: Produto = {
  nome: "O senhor dos aneis",
  preco: 230,
};

// ==================== NOME DO ARQUIVO MANUAIS ====================
// Crie uma pasta espec√≠fica para os arquivos .d.ts criados manualmente, pois o TS ignora arquivos que possuem o mesmo nome e diret√≥rio, em favor do arquivo que terminar em .ts.

// - Use ‚úÖ
// /types/script.d.ts
// /script.ts

// - N√£o use üî¥
// /script.d.ts
// /script.ts

// ==================== EVITE GLOBAIS ====================
// Use apenas quando necess√°rio. Assim como vari√°veis globais s√£o problem√°ticas, tipos globais possuem os mesmos problemas.

// ==================== CONCLUS√ÉO ====================
// Vefifique o arquivo "index.d.ts" no diret√≥rio "dist", para conferir o resultado final
