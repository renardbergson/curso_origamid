// ==================== MODULE ====================
// Quando usamos as palavras-chave "import" ou "export" em um arquivo .ts, esse arquivo √© tratado como um m√≥dulo.
// Isso significa que seu escopo deixa de ser global, e para acessar o conte√∫do de um m√≥dulo em outro arquivo .ts, √© necess√°rio exportar o que se deseja compartilhar.
// PS: Vale notar que a importa√ß√£o pode vir de um arquivo .js üí°
// PS: No HTML, √© necess√°rio declarar o arquivo principal como do tipo "module" para que o TypeScript trate o arquivo como um m√≥dulo üí°
import plugin from "./plugin.js";
plugin("teste");

// ==================== COMO CARREGAR SCRIPTS DE FORMA GLOBAL? ====================
// Para carregar scripts globalmente, basta adicion√°-los no HTML, como fazemos com o arquivo JavaScript principal.
// Aten√ß√£o! A ordem de carregamento dos arquivos importa: um script carregado antes de outro n√£o ter√° acesso aos scripts que s√£o carregados posteriormente, mesmo que estejam no escopo global! üö®
// Esse tipo de erro pode causar problemas ou confus√µes, ent√£o, sempre que poss√≠vel, evite depender da ordem de carregamento dos scripts. üí°
console.log(URL_BASE);

// ==================== COMO EVITAR ERROS DE CARREGAMENTO DE SCRIPTS? ====================
// Podemos configurar o arquivo "tsconfig.json" com a op√ß√£o "isolatedModules": true, o que for√ßa o uso de m√≥dulos no TypeScript.
// Essa configura√ß√£o impede o uso de arquivos com scripts globais, evitando erros de escopo e carregamento.
// Vamos adicionar essa configura√ß√£o na pr√≥xima aula para n√£o interferir no exemplo com o arquivo "global.ts".
