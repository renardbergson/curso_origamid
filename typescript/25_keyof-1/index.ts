// ========================= KEYOF =========================

// ========== KEYOF ==========
// Indica que o dado √© uma chave de uma Interface/Tipo üí°
// Retorna sempre strings com os nomes das chaves dispon√≠veis no tipo referido.
// Geralmente utilizado em contextos mais avan√ßados com TypeScript.

interface Produto {
  nome: string;
  preco: string;
}

let chave: keyof Produto; // let chave = "nome" | "preco"
chave = "nome";
chave = "preco";

// ========== TYPEOF ==========
// No JavaScript, "typeof" retorna o tipo do dado como uma string.
// Em TypeScript, "typeof" tamb√©m pode ser usado para INFERIR o tipo de outro dado ou fun√ß√£o! üí°

function coordenadas(x: number, y: number) {
  return { x, y };
}

// Tipo de 'coord' √© inferido com base na fun√ß√£o 'coordenadas'.
let coord: typeof coordenadas;

// Cen√°rio 1 (Erro)
// coord = "teste";
// üî¥ Erro: O tipo 'string' n√£o pode ser atribu√≠do ao tipo '(x: number, y: number) => { x: number; y: number; }'

// Cen√°rio 2 (Refer√™ncia correta)
coord = (x: number, y: number) => {
  return {
    x,
    y,
  };
};

// ========== KEYOF NA CONSTRU√á√ÉO DO QUERYSELECTOR ==========
// Vamos recriar uma l√≥gica parecida com "querySelector()" no TypeScript.
// A ideia √© tornar o "seletor" din√¢mico, baseado nas chaves da interface "Elementos".

interface Elementos {
  a: HTMLAnchorElement;
  div: HTMLDivElement;
  video: HTMLVideoElement;
  ul: HTMLUListElement;
  body: HTMLBodyElement;
}

// Exemplo inicial üí°
// O seletor √© fixo, funcionando apenas para a chave "a" da interface.
/* 
  function seletorElemento(seletor: "a"): Elementos["a"] | null {
    return document.querySelector(seletor);
  } 
*/

// Implementa√ß√£o gen√©rica ‚úÖ
// prettier-ignore

// Assinatura 1: Quando o seletor √© uma chave da interface "Elementos".
function selecionarElemento<Chave extends keyof Elementos>(seletor: Chave): Elementos[Chave] | null;
// Assinatura 2: Quando o seletor √© uma string gen√©rica.
function selecionarElemento(seletor: string): HTMLElement | null;
// Implementa√ß√£o: Atende ambas as assinaturas.
function selecionarElemento(seletor: string): HTMLElement | null {
  return document.querySelector(seletor);
}

// Exemplos de uso.
selecionarElemento("video")?.volume; // V√°lido: Seleciona um elemento do tipo HTMLVideoElement.
selecionarElemento("a")?.href; // V√°lido: Seleciona um elemento do tipo HTMLAnchorElement.
selecionarElemento(".teste"); // V√°lido: Seleciona um elemento gen√©rico com uma classe.

// Por que implementar a assinatura 2 como l√≥gica final e n√£o a assinatura 1?
// 1. A assinatura 1 √© restritiva, pois exige que o seletor seja sempre uma chave de "Elementos".
//    Isso exclui seletores gen√©ricos como ".teste". üí°
// 2. A assinatura 2 √© mais permissiva, permitindo o uso de seletores gen√©ricos.
// 3. Solu√ß√£o: Manter ambas as assinaturas e uma l√≥gica gen√©rica para abranger todos os casos poss√≠veis. ‚úÖ
