"use strict";
// ========================= KEYOF =========================
let chave; // let chave = "nome" | "preco"
chave = "nome";
chave = "preco";
// ========== TYPEOF ==========
// No JavaScript, "typeof" retorna o tipo do dado como uma string.
// Em TypeScript, "typeof" tamb√©m pode ser usado para INFERIR o tipo de outro dado ou fun√ß√£o! üí°
function coordenadas(x, y) {
    return { x, y };
}
// Tipo de 'coord' √© inferido com base na fun√ß√£o 'coordenadas'.
let coord;
// Cen√°rio 1 (Erro)
// coord = "teste";
// üî¥ Erro: O tipo 'string' n√£o pode ser atribu√≠do ao tipo '(x: number, y: number) => { x: number; y: number; }'
// Cen√°rio 2 (Refer√™ncia correta)
coord = (x, y) => {
    return {
        x,
        y,
    };
};
// Implementa√ß√£o: Atende ambas as assinaturas.
function selecionarElemento(seletor) {
    return document.querySelector(seletor);
}
// Exemplos de uso.
selecionarElemento("video")?.volume; // V√°lido: Seleciona um elemento do tipo HTMLVideoElement.
selecionarElemento("a")?.href; // V√°lido: Seleciona um elemento do tipo HTMLAnchorElement.
selecionarElemento(".teste"); // V√°lido: Seleciona um elemento gen√©rico com uma classe.
// Por que implementar a assinatura 2 como l√≥gica final e n√£o a assinatura 1?
// 1. A assinatura 1 √© restritiva, pois exige que o seletor seja sempre uma chave de "Elementos".
//    Isso exclui seletores gen√©ricos como ".teste". üí°
// 2. A assinatura 2 √© mais permissiva, permitindo o uso de seletores gen√©ricos.
// 3. Solu√ß√£o: Manter ambas as assinaturas e uma l√≥gica gen√©rica para abranger todos os casos poss√≠veis. ‚úÖ
