// ========================= GENERICS =========================
// Um tipo gen√©rico permite declarar um tipo "par√¢metro" em fun√ß√µes, classes ou interfaces.
// Com a sintaxe <Tipo>, podemos indicar o tipo no momento do uso, tornando o c√≥digo mais flex√≠vel e reutiliz√°vel.
// Enquanto uma anota√ß√£o comum define um tipo fixo, como `number` ou `string`,
// um generic permite que o tipo se adapte ao valor fornecido, melhorando a seguran√ßa e a reutiliza√ß√£o. üí°

// Cen√°rio I: Sem Generics
// Problemas:
// 1. Diversas anota√ß√µes poss√≠veis para o par√¢metro `a`
// 2. TypeScript assume que o retorno pode ser qualquer um dos tipos anotados
// 3. M√©todos espec√≠ficos do tipo n√£o s√£o sugeridos e geram erros
// 4. Resolver o tipo manualmente dentro da fun√ß√£o seria trabalhoso (ex.: usando `typeof`)

function mostrarTipoRetorno(a: string | number | boolean) {
  return a;
}

console.log(mostrarTipoRetorno("sou uma string").toUpperCase());
// üî¥ Erro: 'toUpperCase' n√£o existe em 'string | number | boolean'
console.log(mostrarTipoRetorno(200));
console.log(mostrarTipoRetorno(true));

// Como usar Generics?
// Definimos tipos gen√©ricos usando os sinais <>
// Ex.: <Tipo>, onde `Tipo` pode ter qualquer nome, representando o tipo flex√≠vel. üí°

// Cen√°rio II: Com Generics
// Vantagens:
// 1. A fun√ß√£o sabe, de forma din√¢mica, qual ser√° o tipo retornado
// 2. Fornece autocomplete e seguran√ßa para o tipo recebido

function mostrarTipoRetorno2<Tipo>(a: Tipo): Tipo {
  return a;
}

console.log(mostrarTipoRetorno2("sou uma string").toUpperCase()); // üü¢ Correto: tipo inferido como string
console.log(mostrarTipoRetorno2(200)); // üü¢ Correto: tipo inferido como number
console.log(mostrarTipoRetorno2(true)); // üü¢ Correto: tipo inferido como boolean

// OU (anota√ß√£o no retorno)
mostrarTipoRetorno2<string>("sou uma string").toUpperCase();
mostrarTipoRetorno2<number>(200);
mostrarTipoRetorno2<boolean>(true);

/*  
  Como funciona?  
  Quando passamos um tipo espec√≠fico, TypeScript recria a fun√ß√£o com o tipo fornecido:

  - Passando `string`:
    function mostrarTipoRetorno2<string>(a: string): string { return a; }

  - Passando `number`:
    function mostrarTipoRetorno2<number>(a: number): number { return a; }
    
  Anota√ß√µes expl√≠citas na execu√ß√£o de uma fun√ß√£o (linhas 41, 42 e 43) s√£o opcionais aqui, sendo obrigat√≥rias em cen√°rios mais complexos. üí°
*/

// ========================== EXEMPLOS ==========================

// EXEMPLO 1: Retornar os cinco primeiros itens de uma lista qualquer
const numeros = [1, 2, 3, 4, 5, 6, 7, 8];
const frutas = ["Banana", "P√™ra", "Uva", "Laranja", "Lim√£o", "Ma√ß√£"];

function cincoPrimeiros<TipoLista>(lista: Array<TipoLista>): TipoLista[] {
  // I - Tipo gen√©rico para o tipo da lista
  // II - Anota√ß√£o indica o tipo da lista recebida
  // III - Tipo do retorno √© opcional (j√° √© derivado do tipo recebido)
  return lista.slice(0, 5);
}

console.log(cincoPrimeiros(numeros)); // üü¢ number[]
console.log(cincoPrimeiros(frutas)); // üü¢ string[]

// EXEMPLO 2: Retornar um valor se ele n√£o for `null`
function notNull<T>(valor: T) {
  return valor !== null ? valor : null;
}
console.log(notNull("Renard")?.toUpperCase()); // üü¢ RENARD

// EXEMPLO 3: Retornar um objeto com o dado recebido e seu tipo
function tipoDado<T>(dado: T): { dado: T; tipo: string } {
  const resultado = { dado, tipo: typeof dado };
  console.log(resultado);
  return resultado;
}

tipoDado("Teste"); // üü¢ {dado: 'Teste', tipo: 'string'}
tipoDado(true); // üü¢ {dado: true, tipo: 'boolean'}
tipoDado([]); // üü¢ {dado: Array(0), tipo: 'object'}
