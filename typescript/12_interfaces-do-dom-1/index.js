// ===================== INTERFACES DO DOM =====================
// TYPEOF x INSTANCEOF
// Lembre-se: qualquer elemento retornado pelo DOM √© um objeto constru√≠do a partir de uma classe construtora.
// Ent√£o, "typeof" n√£o ser√° √∫til em casos mais complexos, visto que sempre retornar√° "object".
// Usaremos "typeof" com tipos primitivos (string, number, boolean, etc).
// QUERY SELECTOR
// Quando selecionamos um elemento do DOM com querySelector, o objeto retornado depender√° da string passada no m√©todo.
// Para saber quais objetos o DOM pode retornar, √© preciso consultar a documenta√ß√£o que detalha esses objetos e suas propriedades/m√©todos.
// Refer√™ncia: https://developer.mozilla.org/en-US/docs/Web/API
/*
  Por exemplo: se pesquisarmos pelo objeto "HTMLAnchorElement", podemos ver que essa classe extende outras 4 classes,
  sendo inst√¢ncia de cada uma delas e herdando suas propriedades:

  EventTarget ‚¨Ö Node ‚¨Ö Element ‚¨Ö HTMLElement ‚¨Ö HTMLAnchorElement
*/
// No exemplo a seguir, vamos selecionar o mesmo elemento de v√≠deo de duas formas diferentes.
// A segunda forma resultar√° em erro, mas usaremos "instanceof" para corrigir:
const video = document.querySelector("video"); // : HTMLVideoElement (infer√™ncia correta)
video?.volume;
// Problema (selecionar o mesmo elemento via ID)
// A anota√ß√£o "HTMLVideoElement" tamb√©m resolveria o erro a seguir! üí°
const videoDiv = document.querySelector("#video"); // : HTMLElement üî¥
videoDiv?.volume; // erro: A propriedade 'volume' n√£o existe no tipo 'HTMLElement' üî¥ (TS n√£o verifica o tipo de elemento)
// Solu√ß√£o
// Usando "instanceof" para verificar se o elemento selecionado √© do tipo HTMLVideoElement antes de acessar "volume"
if (videoDiv instanceof HTMLVideoElement) {
    videoDiv.volume; // üü¢ Correto, sem necessidade de optional chaining
}
// Outros exemplos de querySelector
document.querySelector("img"); // : HTMLImageElement
const link1 = document.querySelector("a"); // : HTMLAnchorElement
const link2 = document.querySelector("#origamid"); // : Element
// QUERY SELECTOR ALL
// O querySelectorAll retorna uma NodeList de elementos.
// Aten√ß√£o: n√£o confundir a interface NodeListOf com a classe NodeList üí°
// No nosso HTML temos 3 elementos (2 √¢ncoras e 1 bot√£o) com a mesma classe "link"
const links = document.querySelectorAll(".link"); // : NodeListOf<Element>
// A anota√ß√£o "NodeListOf<HTMLAnchorElement>" tamb√©m resolveria o erro a seguir! üí°
console.log(links instanceof NodeList); // true
links.forEach((item) => {
    item.href; // erro: A propriedade 'href' n√£o existe no tipo 'Element'. üî¥
    // O erro ocorre porque "button" n√£o possui "href"
    // Cen√°rio 1 (exemplo do console.log)
    /*
      http://127.0.0.1:5500/
      http://127.0.0.1:5500/produtos
      undefined
    */
    // Cen√°rio 2 (correto)
    if (item instanceof HTMLAnchorElement) {
        console.log(item.href);
        /*
          http://127.0.0.1:5500/
          http://127.0.0.1:5500/produtos
        */
    }
});
