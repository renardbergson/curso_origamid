// ========================= EXERC√çCIOS =========================

/*  
  1 - Conserte a fun√ß√£o a seguir com TypeScript

    function normalizarTexto(texto) {
      return texto.trims().toLowercase();
    }

  2 - Conserte o c√≥digo a seguir com TypeScript

    const input = document.querySelector('input');
    const total = localStorage.getItem('total');
    
    input.value = total;
    calcularGanho(input.value);

    function calcularGanho(value) {
      const p = document.querySelector('p');
      p.innerText = `ganho total: ${value + 100 - value * 0.2}`;
    }

    function totalMudou() {
      const value = Number(input.value);
      localStorage.setItem('total', value);
      calcularGanho(value);
    }

    input.addEventListener('keyup', totalMudou);

    Este exerc√≠cio envolve um input onde o usu√°rio insere um n√∫mero. 
    O valor final ser√° calculado e exibido em um par√°grafo, e tamb√©m ser√° salvo no localStorage para persist√™ncia.
*/

// SOLU√á√ÉO - EXERC√çCIO 1
function normalizarTexto(texto: string): string {
  return texto.trim().toLowerCase();
  // Remove espa√ßos em branco do in√≠cio e do fim de uma string e transforma tudo em letras min√∫sculas
}

const frase = " Somos T√£o Jovens   ";
const fraseNormalizada = normalizarTexto(frase);
console.log(fraseNormalizada); // Output: somos t√£o jovens

// SOLU√á√ÉO - EXERC√çCIO 2
// Seleciona o input e recupera o total do localStorage
const input = document.querySelector("input");
const total = localStorage.getItem("total");

// Verifica se o input e o total est√£o dispon√≠veis
if (input && total) {
  input.value = total;
  calcularGanho(Number(input.value));
}

// Fun√ß√£o chamada quando o valor do input muda
function totalMudou(): void {
  // o operador "void" √© usado como um tipo de retorno de fun√ß√£o para indicar que a fun√ß√£o n√£o retorna um valor. Em outras palavras, uma fun√ß√£o que tem o tipo de retorno "void" n√£o deve retornar explicitamente nenhum valor; se tentar faz√™-lo, o TypeScript emitir√° um erro. üí°
  if (input) {
    localStorage.setItem("total", input.value);
    calcularGanho(Number(input.value)); // transformando string em n√∫mero
  }
}

// Fun√ß√£o para calcular ganhos
function calcularGanho(value: number): void {
  const p = document.querySelector("p");

  if (p) {
    p.innerHTML = "";

    if (value >= 200) {
      p.innerText = `Seus ganhos: ${100 + value * 0.2}`;
      return;
    }

    p.innerText = "üî¥ O total de vendas precisa ser de pelo menos 200 reais!";
  }
}

// Adiciona evento para monitorar mudan√ßas no input
if (input) {
  input.addEventListener("keyup", totalMudou);
}

/*  
  ‚ö† OBSERVA√á√ïES IMPORTANTES ‚ö†:

  I - No c√≥digo problem√°tico, uma s√©rie algumas a√ß√µes eram tomadas sem antes verificar se os elementos envolvidos existiam no DOM, o que poderia ocasionar erros, caso n√£o estivessem

  II - Ao digitar no input, o valor era calculado corretamente mas, ao dar refresh na p√°gina, o valor n√£o era somado e sim concatenado, porque:
    - um tratamento de dados (convers√£o) era feito dentro da fun√ß√£o "totalMudou", mas o mesmo n√£o ocorria em "calcularGanho" e, nenhum erro era retornado, porque n√£o foi especificado que o par√¢metro "value" em "calcularGanho" deveria ser um number üí°

  III - A l√≥gica de c√°lculo do b√¥nus foi modificada por mim, pois achei mais condizente com a realidade de um suposto funcion√°rio e empresa
*/
