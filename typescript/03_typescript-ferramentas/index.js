"use strict";
// =================== FERRAMENTAS DO TYPESCRIPT ===================
// Os navegadores e o Node.js n√£o executam TypeScript diretamente, apenas JavaScript üí°
// Por isso, √© necess√°rio usar um compilador que converta o c√≥digo TypeScript para JavaScript
// =================== COMANDOS B√ÅSICOS ===================
// 1 - Instala√ß√£o do TypeScript globalmente:
//    "npm install -g typescript"
//    - Esse comando instala o TypeScript no sistema para que possa ser usado em qualquer projeto
// 2 - Verifica√ß√£o da instala√ß√£o:
//    "tsc"
//    - Executar esse comando no terminal confirma se o TypeScript foi instalado corretamente, exibindo a vers√£o instalada
// 3 - Cria√ß√£o do arquivo de configura√ß√£o "tsconfig.json":
//    "tsc --init"
//    - Esse comando gera o arquivo "tsconfig.json", que define como o TypeScript deve ser compilado. Aqui est√° uma configura√ß√£o b√°sica que usaremos:
/*
  {
    "compilerOptions": {
      "target": "ESNext", // Vers√£o moderna de JavaScript
      "strict": true      // Modo estrito para valida√ß√£o de tipos
    }
  }
  
  I - "target": Define para qual vers√£o do JavaScript o TypeScript ser√° compilado. O valor "ESNext" compila para a vers√£o mais moderna dispon√≠vel.
  II - "strict": Ativa o modo estrito, adicionando regras rigorosas de tipagem e prevenindo erros comuns, como o uso do tipo "any".
*/
// 4 - Observando mudan√ßas nos arquivos TypeScript:
//    "tsc -w"
//    - Esse comando monitora os arquivos TypeScript e recompila automaticamente sempre que h√° mudan√ßas, eliminando a necessidade de rodar "tsc" manualmente ap√≥s cada altera√ß√£o.
// =================== INTRODU√á√ÉO AOS TYPE ANNOTATIONS ===================
// Exemplo b√°sico de anota√ß√£o de tipos no TypeScript:
function somar(a, b) {
    return a + b;
}
console.log(somar(10, 20)); // Sa√≠da: 30
