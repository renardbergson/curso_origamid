// ===================== NULL E UNDEFINED =====================
// NULL
// √â um tipo primitivo que representa aus√™ncia de valor.
// √â comum ver fun√ß√µes do DOM que fazem uma busca, retornam "null", quando n√£o s√£o bem sucedidas
// Que impacto isso tem no TS? Sempre que falarmos com um elemento que pode retornar "null", antes de tentar acessar qualquer propriedade ou m√©todo desse elemento, precisamos verificar se esse elemento existe ou n√£o
// As checagens a seguir evitam o erro: "Cannot read properties of null" üî¥
const config = localStorage.getItem("config");
// I
if (config !== null) {
    config.toLowerCase();
}
// II
if (config) {
    config.toLowerCase();
}
// III
if (config)
    config.toLowerCase();
// IV (optional chaining)
config?.toLocaleLowerCase();
// UNDEFINED
// Representa vari√°veis/propriedades que foram instanciadas, por√©m os seus valores ainda n√£o foram definidos
// Tamb√©m representa fun√ß√µes sem retorno
let total;
if (total) {
    console.log("'total' foi definido");
}
else {
    console.log("'total' n√£o foi definido"); // = undefined
}
const data = {};
// @ts-ignore
console.log(data.nome); // undefined
const livro = {};
const jogo = {
    nome: "Ragnarok",
};
console.log(livro.nome?.toLowerCase());
console.log(jogo.nome?.toLocaleLowerCase()); // ragnarok
// STRICT NULL CHECKS
// √â a configura√ß√£o respons√°vel por apontar os poss√≠veis erros acima
// Sem essa propriedade atribuida como "true" no arquivo "tsconfig.json", o TS assume que qualquer valor pode incluir "null | undefined" e, consequentemente para de checar casos onde "null | undefined" podem ser retornados
// O modo estrito (strict mode) j√° altera essa propriedade para "true" üí°
// Nunca utilizaremos o TS sem o modo estrito ativado üí°
