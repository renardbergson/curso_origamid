"use strict";
// =================== ANNOTATION (ANOTA√á√ÉO DE TIPOS) ===================
// Com TypeScript, podemos definir explicitamente o tipo de uma vari√°vel usando anota√ß√µes (:tipo)
// Isso garante que a vari√°vel s√≥ poder√° armazenar valores desse tipo
const produto = "Livro"; // A vari√°vel "produto" s√≥ pode armazenar strings
let preco = 200; // A vari√°vel "preco" s√≥ pode armazenar n√∫meros
// Exemplo de um objeto com anota√ß√µes de tipo para suas propriedades
const carro = {
    marca: "Audi",
    portas: 5,
};
// Nota sobre "Interface":
// No exemplo do objeto "carro", estamos modelando o formato e os tipos das propriedades diretamente na anota√ß√£o.
// Isso √© semelhante ao conceito de **Interface** no TypeScript, que permite definir a estrutura de um objeto.
// Neste caso, a "interface" est√° embutida na pr√≥pria declara√ß√£o do objeto, mas tamb√©m poderia ser criada de forma isolada.
// =================== INFERENCE (INFER√äNCIA DE TIPOS) ===================
// O TypeScript pode inferir automaticamente o tipo de uma vari√°vel com base no valor que ela recebe.
// Isso significa que nem sempre √© necess√°rio fazer uma anota√ß√£o expl√≠cita.
let pessoa = "Renard"; // TS infere que "pessoa" √© do tipo string
// A partir daqui, "pessoa" ser√° tratada como string, e o TS sugerir√° m√©todos e verificar√° erros com base nisso
// Se tentarmos atribuir um valor de outro tipo, o TypeScript gerar√° um erro:
pessoa = 32; // Erro: O tipo 'number' n√£o pode ser atribu√≠do ao tipo 'string'.ts(2322) üî¥
// Outro exemplo de infer√™ncia:
const taxa = 300;
const barato = taxa < 400 ? true : "produto supertaxado";
// A vari√°vel "barato" ter√° um tipo inferido como: `true | "produto supertaxado"`
// Isso significa que, no momento de execu√ß√£o (runtime), "barato" pode ser `true` ou a string "produto supertaxado".
// Note que o tipo da vari√°vel √© determinado em tempo de leitura do c√≥digo, mas a decis√£o final acontece em tempo de execu√ß√£o.
// =================== FUN√á√ïES ===================
// Em fun√ß√µes, as anota√ß√µes de tipos se tornam especialmente importantes para indicar quais tipos de par√¢metros e retorno a fun√ß√£o deve aceitar e retornar.
// Exemplo 1: Fun√ß√£o com anota√ß√£o de tipo no par√¢metro e no retorno
function dobro(a) {
    // A fun√ß√£o recebe um n√∫mero (number) e retorna um n√∫mero (number)
    return a * 2;
    // Ao usar "a.", o TypeScript sugere os m√©todos dispon√≠veis para o tipo number
}
// Exemplo 2: Fun√ß√£o que manipula objetos com tipos expl√≠citos
const nintendo = {
    nome: "Nintendo",
    preco: "2000",
};
// A fun√ß√£o "transformarPreco" recebe um objeto com as propriedades "nome" (string) e "preco" (string)
function transformarPreco(produto) {
    produto.preco = "R$ " + produto.preco + ",00"; // Formata o pre√ßo como string
    return produto; // Retorna o objeto com o pre√ßo formatado
}
const produtoPrecoFormatado = transformarPreco(nintendo);
console.log(produtoPrecoFormatado); // Sa√≠da: { nome: 'Nintendo', preco: 'R$ 2000,00' }
