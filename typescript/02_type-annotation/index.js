// @ts-check

// =================== TYPE ANNOTATION ===================
// O JavaScript, por padrÃ£o, nÃ£o permite especificar o tipo de dados em variÃ¡veis ou parÃ¢metros de funÃ§Ãµes ðŸ’¡
// Isso significa que, ao trabalhar com funÃ§Ãµes, nÃ£o Ã© possÃ­vel prever o tipo do argumento que serÃ¡ passado, o que pode levar a erros e falta de sugestÃµes de cÃ³digo
// Ã‰ aqui que entram as anotaÃ§Ãµes de tipo do TypeScript, que ajudam a prever esses tipos e evitam problemas

// Exemplo de um array de objetos, sem anotaÃ§Ã£o de tipo:
const produtos = [
  { nome: 'O Senhor dos AnÃ©is', tipo: 'livro' },
  { nome: 'A Guerra dos Tronos', tipo: 'livro' },
  { nome: 'Dark Souls', tipo: 'jogo' },
];

// FunÃ§Ã£o para filtrar objetos do tipo 'livro', sem anotaÃ§Ã£o de tipo:
function filtrarLivros(dados) {
  // Sem anotaÃ§Ãµes de tipo, o VS Code nÃ£o consegue sugerir mÃ©todos ou propriedades ao teclar "dados." ou "item." ðŸ”´
  // Isso ocorre porque o JavaScript nÃ£o sabe a estrutura de "dados" e "item"
  // Mesmo com "@ts-check", esse problema persiste, jÃ¡ que o JS nÃ£o tem como inferir o tipo sem uma anotaÃ§Ã£o explÃ­cita

  return dados.filter((item) => item.tipo === 'livro');
}

// Exibindo os objetos do tipo 'livro':
console.log("Objetos do tipo 'Livro':");
console.log(filtrarLivros(produtos));