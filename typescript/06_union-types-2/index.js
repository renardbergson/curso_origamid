"use strict";
// ========================= UNION TYPES =========================
// 1 - Crie uma fun√ß√£o chamada toNumber
// 2 - A fun√ß√£o pode receber number | string
// 3 - Se a fun√ß√£o receber um n√∫mero, retorne um n√∫mero
// 4 - Se a fun√ß√£o receber uma string, retorne um n√∫mero
// 5 - Se ela receber algo diferente, retorne um erro. (throw "value deve ser um n√∫mero ou uma string")
// Observe que, na fun√ß√£o a seguir utiliza-se o conceito de "type guards"
// Type Guards (guardas de tipo) s√£o t√©cnicas que permitem refinar e garantir o tipo de uma vari√°vel dentro de um bloco de c√≥digo, como condicionais. Eles ajudam a lidar de maneira segura com tipos em Union Types, checando o tipo de valor em tempo de execu√ß√£o, o que permite verificar qual tipo de dado est√° sendo manipulado em diferentes blocos de c√≥digo. üí°
function toNumber(value) {
    if (typeof value === "string") {
        return Number(value); // converte string para n√∫mero
    }
    if (typeof value === "number") {
        return value; // retorna o n√∫mero diretamente
    }
    throw new Error("value deve ser um n√∫mero ou uma string"); // lan√ßa um erro
}
// Exemplo de uso:
console.log(toNumber("200")); // 200
console.log(toNumber(200)); // 200
console.log(toNumber(true)); // Lan√ßa um erro
