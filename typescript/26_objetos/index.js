"use strict";
// ==================== OBJETOS ====================
const produto1 = {
    nome: "notebook",
    quantidade: 10,
    cor: "preto", // Propriedade extra em rela√ß√£o √† interface Produto.
};
function mostrarProduto(produto) {
    console.log("Quantidade do produto no estoque: " + produto.quantidade);
}
mostrarProduto(produto1);
// √â poss√≠vel ter propriedades a mais, por√©m nunca a menos! üí°
// No exemplo a seguir temos uma propriedade a mais (preco) em rela√ß√£o √† interface "Produto", mas falta a propriedade "quantidade".
// Caso necess√°rio, √© poss√≠vel tornar "quantidade" opcional na interface.
const servico = {
    nome: "Instala√ß√£o de ar-condicionado",
    preco: 300,
};
// mostrarProduto(servico); üî¥ Erro: A propriedade 'quantidade' est√° ausente no tipo '{ nome: string; preco: number; }', mas √© obrigat√≥ria no tipo 'Produto'.
// ========== PARTIAL ==========
// O TypeScript conta com "utility types" que s√£o fun√ß√µes capazes de transformar uma interface ou tipo em outra.
// Por exemplo, atrav√©s da sintaxe: "Partial<Tipo>", √© poss√≠vel indicar que todas as propriedades de uma interface ser√£o opcionais.
function mostrarQuantidadeComPartial(produto) {
    console.log(produto.quantidade ?? null); // Usando o operador de coalesc√™ncia nula.
}
mostrarQuantidadeComPartial(servico); // null, mas agora foi poss√≠vel passar "servico" como argumento.
mostrarQuantidadeComPartial({}); // null
const artigo = {
    titulo: "Como aprender HTML",
    visualizacoes: 3000,
    tags: ["HTML", "Front-end"],
    autor: "Renard Bergson", // Propriedade extra.
    ano: 2024,
};
console.log(artigo);
// Reflex√£o sobre o uso de propriedades extras:
console.log(artigo.descricao); // undefined
console.log(artigo.asuhausuahus); // undefined
function mostrarTitulo(obj) {
    if ("titulo" in obj) {
        console.log(obj.titulo);
    }
}
// mostrarTitulo(200); üî¥ Erro: "Cannot use 'in' operator to search for 'titulo' in 200".
mostrarTitulo({ titulo: "Aprendendo TypeScript" });
// ========== DEMAIS UTILITY TYPES ==========
// https://www.typescriptlang.org/docs/handbook/utility-types.html
