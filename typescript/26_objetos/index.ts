// ==================== OBJETOS ====================

// ========== DUCK TYPING ==========
// Um objeto, quando passado como argumento de uma fun√ß√£o, pode conter propriedades e m√©todos al√©m dos declarados na interface.
// Duck typing baseia-se no conceito:
// "Se parece com um pato, nada como um pato e grasna como um pato, ent√£o provavelmente √© um pato." - Wikip√©dia.

interface Produto {
  nome: string;
  quantidade: number;
}

const produto1 = {
  nome: "notebook",
  quantidade: 10,
  cor: "preto", // Propriedade extra em rela√ß√£o √† interface Produto.
};

function mostrarProduto(produto: Produto) {
  console.log("Quantidade do produto no estoque: " + produto.quantidade);
}

mostrarProduto(produto1);

// √â poss√≠vel ter propriedades a mais, por√©m nunca a menos! üí°
// No exemplo a seguir temos uma propriedade a mais (preco) em rela√ß√£o √† interface "Produto", mas falta a propriedade "quantidade".
// Caso necess√°rio, √© poss√≠vel tornar "quantidade" opcional na interface.

const servico = {
  nome: "Instala√ß√£o de ar-condicionado",
  preco: 300,
};

// mostrarProduto(servico); üî¥ Erro: A propriedade 'quantidade' est√° ausente no tipo '{ nome: string; preco: number; }', mas √© obrigat√≥ria no tipo 'Produto'.

// ========== PARTIAL ==========
// O TypeScript conta com "utility types" que s√£o fun√ß√µes capazes de transformar uma interface ou tipo em outra.
// Por exemplo, atrav√©s da sintaxe: "Partial<Tipo>", √© poss√≠vel indicar que todas as propriedades de uma interface ser√£o opcionais.

function mostrarQuantidadeComPartial(produto: Partial<Produto>) {
  console.log(produto.quantidade ?? null); // Usando o operador de coalesc√™ncia nula.
}

mostrarQuantidadeComPartial(servico); // null, mas agora foi poss√≠vel passar "servico" como argumento.
mostrarQuantidadeComPartial({}); // null
// Apesar de √∫til, utilizar "Partial" pode enfraquecer a seguran√ßa de tipos. Use com cautela. üí°

// ========== [KEY: STRING]: UNKNOWN ==========
// Se n√£o estivermos nos referindo ao argumento de uma fun√ß√£o, ainda assim √© poss√≠vel definir que um objeto poder√° conter propriedades/m√©todos al√©m dos que foram definidos inicialmente.
// A interface "Post" a seguir ilustra um cen√°rio em que artigos possuem propriedades extras al√©m das especificadas na Interface de refer√™ncia.

interface Post {
  titulo: string;
  visualizacoes: number;
  tags: string[];
  [key: string]: unknown; // Aceita qualquer chave string com valor desconhecido.
}

const artigo: Post = {
  titulo: "Como aprender HTML",
  visualizacoes: 3000,
  tags: ["HTML", "Front-end"],
  autor: "Renard Bergson", // Propriedade extra.
  ano: 2024,
};

console.log(artigo);

// Reflex√£o sobre o uso de propriedades extras:
console.log(artigo.descricao); // undefined
console.log(artigo.asuhausuahus); // undefined

// ========== RECORD ==========
// A utility type "Record" pode ser usado para definir a interface de um Objeto Literal gen√©rico.
// Ele √© equivalente √† defini√ß√£o manual de `[key: string]: tipo`, mas com maior flexibilidade.
// No exemplo a seguir, criamos uma fun√ß√£o que aceita apenas objetos literais como argumento.

type ObjetoLiteral = {
  [key: string]: unknown; // Chaves string com valores desconhecidos.
};

type ObjetoLiteral2 = Record<string, unknown>; // Exatamente equivalente ao ObjetoLiteral.

function mostrarTitulo(obj: ObjetoLiteral & ObjetoLiteral2) {
  if ("titulo" in obj) {
    console.log(obj.titulo);
  }
}

// mostrarTitulo(200); üî¥ Erro: "Cannot use 'in' operator to search for 'titulo' in 200".
mostrarTitulo({ titulo: "Aprendendo TypeScript" });

// A utility type "Record" √© flex√≠vel e pode ser usado para formatos mais espec√≠ficos.
type Teste = Record<"titulo" | "autor", unknown>;
type Teste2 = Record<string, string>;
type Teste3 = Record<number, string>; // Chaves num√©ricas com valores string.

// ========== DEMAIS UTILITY TYPES ==========
// https://www.typescriptlang.org/docs/handbook/utility-types.html
