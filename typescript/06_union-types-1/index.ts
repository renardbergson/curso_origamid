// ========================= UNION TYPES =========================
// No TypeScript, Union Types (tipos de uni√£o) permitem que uma vari√°vel ou fun√ß√£o possa ter mais de um tipo de valor.
// Isso √© √∫til quando um valor pode assumir diferentes tipos e voc√™ deseja explicitar essa flexibilidade no c√≥digo.
// Para criar um Union Type, usa-se o caractere "|" (pipe) entre os tipos que se deseja combinar.
// Veja alguns exemplos:

// Exemplo I: Vari√°vel com m√∫ltiplos tipos
let valor: string | number | boolean;
valor = "Ol√°"; // v√°lido, √© uma string
valor = 42; // v√°lido, √© um n√∫mero
valor = true; // v√°lido, √© um booleano

// Exemplo II: Vari√°vel que alterna entre tipos
let total: string | number = 200; // come√ßa como n√∫mero
total = "200"; // pode se tornar string posteriormente

// Exemplo III: Fun√ß√£o com Union Types e checagem de tipo
function isNumber(value: string | number): boolean {
  return typeof value === "number";
  // √© o mesmo que perguntar: "o tipo de 'value' √© igual a 'number'?"
  // retorna true se for n√∫mero, caso contr√°rio false
  // podemos especificar ainda mais que o tipo na sa√≠da ser√° um s√≥, anotando o retorno como booleano (:boolean) üí°
}

// Obs: √â recomend√°vel que fun√ß√µes retornem sempre o mesmo tipo de dado. üí°
// Um erro comum seria retornar uma string quando o valor n√£o for um n√∫mero, como no exemplo abaixo:

/*  
  function isNumber(value: string | number) {
    if (typeof value === "number") {
      return true;
    }
    return "N√£o √© um n√∫mero";  // Erro: fun√ß√£o que retorna mais de um tipo de valor
  }

  if (isNumber("200")) {
    console.log("√â um n√∫mero");
  }

  // Nesse cen√°rio, o retorno seria "√â um n√∫mero", pois o valor "N√£o √© um n√∫mero" √© uma string preenchida, e strings preenchidas s√£o consideradas verdadeiras (truthy) em uma verifica√ß√£o. üí°
  // O correto seria garantir que a fun√ß√£o retorne apenas booleanos.
*/

console.log(isNumber(200)); // true
console.log(isNumber("200")); // false

// ========================= UNION TYPES + DOM =========================
// Um uso comum de Union Types ocorre ao manipular elementos do DOM, porque o TypeScript n√£o pode garantir que um elemento HTML realmente existe no momento da sele√ß√£o.
// A sele√ß√£o pode retornar o elemento ou "null".
// Nesse caso, em JavaScript moderno, √© comum usar o recurso "optional chaining" para evitar erros.

// Exemplo: Selecionando um elemento do DOM
// querySelector retorna HTMLButtonElement | null, pois o bot√£o pode ou n√£o existir
const button = document.querySelector("button");

// Usando optional chaining
button?.click(); // A fun√ß√£o click ser√° chamada apenas se "button" for diferente de "null" e "undefined"
